// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jtTxUSUaYyDYVq5FUSGgTb
// Component: RG4J4lO0QS
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: OFcEsEPKVSy/component
import Footer from "../../Footer"; // plasmic-import: rFX_TWDAZit/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_mahoe_hemlock.module.css"; // plasmic-import: jtTxUSUaYyDYVq5FUSGgTb/projectcss
import sty from "./PlasmicCatalog.module.css"; // plasmic-import: RG4J4lO0QS/css

export const PlasmicCatalog__VariantProps = new Array();

export const PlasmicCatalog__ArgProps = new Array();

function PlasmicCatalog__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aq5XB)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__wrAKd)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__izIt6)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"50%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/mahoe_hemlock/images/cat.jpeg",
                  fullWidth: 2965,
                  fullHeight: 4096,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__y9FeC)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"50%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/mahoe_hemlock/images/logs.jpeg",
                  fullWidth: 4096,
                  fullHeight: 2730,
                  aspectRatio: undefined
                }}
              />
            </div>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "footer"],
  header: ["header"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCatalog__ArgProps,
      internalVariantPropNames: PlasmicCatalog__VariantProps
    });

    return PlasmicCatalog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCatalog";
  } else {
    func.displayName = `PlasmicCatalog.${nodeName}`;
  }
  return func;
}

export const PlasmicCatalog = Object.assign(
  // Top-level PlasmicCatalog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicCatalog
    internalVariantProps: PlasmicCatalog__VariantProps,
    internalArgProps: PlasmicCatalog__ArgProps
  }
);

export default PlasmicCatalog;
/* prettier-ignore-end */
